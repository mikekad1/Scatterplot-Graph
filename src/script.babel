const tooltip = document.getElementById('tooltip');
fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json')
     .then(response => response.json())
     .then(response => {
     visualizingData(response.map(r => [
       convertTime(r.Time),
        r.Year,
        r.Doping,
        r.Name
   ])); 
})

function convertTime(str){
  return new Date(`2001 01 01 00:${str}`);
}

function createInnerHtmlForTooltip(d) {
  return `
  ${d[3]} on ${d[1]}
  Time: ${d[0].getMinutes()}:${d[0].getSeconds()}
  
  <small>${d[2] ? d[2] : ''}</small>
  `;
}

function visualizingData(data) {
  const w = 800;
  const h = 400;
  const padding = 40;
  console.log(data);
  const circleRadius = 7;
  
  const yScale = d3.scaleTime()
          .domain([d3.min(data, d => d[0]), d3.max(data, d => d[0])])
          .range([padding, h - padding]);
  
  
  const xScale = d3.scaleTime()
          .domain([d3.min(data, d => new Date(d[1] - 1)), d3.max(data, d => new Date(d[1] + 1))])
          .range([padding, w - padding]);
  
  
  
  
      const svg = d3.select('#container').append('svg')
            .attr('width', w)
            .attr('height', h);
  
   svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('class', 'dot')
          .attr('fill', d => d[2] === '' ?  '#00cec9' :'#e84393')
          .attr('stroke', 'black')
          .attr('data-xvalue', d => d[1])
          .attr('data-yvalue', d => d[0])
          .attr('cx', d => xScale(d[1]))
          .attr('cy', d => yScale(d[0]))
          .attr('r', circleRadius)
          .on('mouseover', (d, i) => {
            tooltip.classList.add('show');
            tooltip.style.left = xScale(d[1]) + 20 + 'px';
            tooltip.style.top = yScale(d[0]) - 10 + 'px';
            tooltip.setAttribute('data-year', d[1])

            tooltip.innerHTML = createInnerHtmlForTooltip(d);

        })
          .on('mouseout', () => {
           tooltip.classList.remove('show');
        });
  
  
  
  
  
  
  const timeFormatForMinAndSec = d3.timeFormat('%M:%S');
  const timeFormatForYear = d3.format('d');
  const xAxis = d3.axisBottom(xScale).tickFormat(timeFormatForYear)
  const yAxis = d3.axisLeft(yScale).tickFormat(timeFormatForMinAndSec)
  
  
       svg.append('g')
          .attr('id', 'x-axis')
          .attr('transform', 'translate(0, ' + (h - padding)+')')
          .call(xAxis);  
               
       svg.append('g')
          .attr('id', 'y-axis')
          .attr('transform', 'translate( '+ padding +',0)')
          .call(yAxis);
}







